# Comprehensive Security Testing Suite for Zero Trust Demo
# Includes penetration testing, compliance validation, and security scanning

---
# Security Test Job
apiVersion: batch/v1
kind: Job
metadata:
  name: security-test-suite
  namespace: monitoring
  labels:
    test-type: security
    compliance: zero-trust
spec:
  template:
    metadata:
      labels:
        test-type: security
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: security-tester
        image: owasp/zap2docker-weekly:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e
          echo "Starting comprehensive security test suite..."

          # Test endpoints
          GATEWAY_URL="http://zuul-gateway-lb.zuul-gateway"
          USER_SERVICE_URL="http://user-service.backend-services:8081"

          echo "=== Testing SSL/TLS Configuration ==="
          testssl.sh --jsonfile /tmp/ssl-results.json $GATEWAY_URL || true

          echo "=== Running OWASP ZAP Baseline Scan ==="
          zap-baseline.py -t $GATEWAY_URL \
            -J /tmp/zap-baseline.json \
            -r /tmp/zap-baseline.html \
            --hook=/zap/auth_hook.py || true

          echo "=== Testing Authentication and Authorization ==="

          # Test without authentication (should fail)
          echo "Testing unauthenticated access..."
          curl -f $GATEWAY_URL/api/v1/users && echo "FAIL: Unauthenticated access allowed" || echo "PASS: Unauthenticated access blocked"

          # Test with invalid JWT (should fail)
          echo "Testing invalid JWT..."
          curl -H "Authorization: Bearer invalid-jwt" -f $GATEWAY_URL/api/v1/users && echo "FAIL: Invalid JWT accepted" || echo "PASS: Invalid JWT rejected"

          echo "=== Testing Network Policies ==="

          # Test direct access to backend (should fail)
          echo "Testing direct backend access..."
          curl -f $USER_SERVICE_URL/api/v1/users && echo "FAIL: Direct backend access allowed" || echo "PASS: Direct backend access blocked"

          echo "=== Testing SQL Injection Attempts ==="
          curl -G -d "id=1' OR '1'='1" $GATEWAY_URL/api/v1/users && echo "FAIL: SQL injection vulnerability" || echo "PASS: SQL injection blocked"

          echo "=== Testing XSS Attempts ==="
          curl -G -d "search=<script>alert('xss')</script>" $GATEWAY_URL/api/v1/users && echo "FAIL: XSS vulnerability" || echo "PASS: XSS blocked"

          echo "=== Testing Directory Traversal ==="
          curl -f $GATEWAY_URL/../../../etc/passwd && echo "FAIL: Directory traversal vulnerability" || echo "PASS: Directory traversal blocked"

          echo "=== Testing Rate Limiting ==="
          for i in $(seq 1 100); do
            curl -s -o /dev/null $GATEWAY_URL/health
          done
          curl -f $GATEWAY_URL/health && echo "PASS: Rate limiting allows normal traffic" || echo "FAIL: Rate limiting too aggressive"

          echo "Security test suite completed"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: test-results
          mountPath: /tmp
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: test-results
        emptyDir: {}

---
# Compliance Test CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: compliance-scanner
  namespace: monitoring
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            test-type: compliance
        spec:
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            fsGroup: 65534
          containers:
          - name: compliance-scanner
            image: aquasec/kube-bench:latest
            command: ["/bin/sh"]
            args:
            - -c
            - |
              set -e
              echo "Starting compliance scan..."

              echo "=== CIS Kubernetes Benchmark ==="
              kube-bench --json > /tmp/cis-benchmark-results.json

              echo "=== Pod Security Standards Check ==="
              kubectl get pods --all-namespaces -o json | jq '
                .items[] | select(
                  .spec.securityContext.runAsNonRoot != true or
                  .spec.containers[].securityContext.allowPrivilegeEscalation != false or
                  (.spec.containers[].securityContext.capabilities.drop // []) | index("ALL") | not
                ) | {
                  namespace: .metadata.namespace,
                  name: .metadata.name,
                  issues: [
                    (if .spec.securityContext.runAsNonRoot != true then "runAsNonRoot not set" else empty end),
                    (if .spec.containers[].securityContext.allowPrivilegeEscalation != false then "allowPrivilegeEscalation not disabled" else empty end),
                    (if (.spec.containers[].securityContext.capabilities.drop // []) | index("ALL") | not then "capabilities not dropped" else empty end)
                  ]
                }' > /tmp/pod-security-violations.json

              echo "=== Network Policy Compliance ==="
              kubectl get networkpolicies --all-namespaces -o json > /tmp/network-policies.json

              echo "=== RBAC Analysis ==="
              kubectl auth can-i --list --as=system:serviceaccount:default:default > /tmp/rbac-permissions.txt

              echo "=== Secret and ConfigMap Analysis ==="
              kubectl get secrets --all-namespaces -o json | jq '
                .items[] | select(.type == "Opaque") | {
                  namespace: .metadata.namespace,
                  name: .metadata.name,
                  keys: (.data // {} | keys)
                }' > /tmp/secrets-analysis.json

              echo "Compliance scan completed"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 65534
              capabilities:
                drop:
                - ALL
            volumeMounts:
            - name: compliance-results
              mountPath: /tmp
            resources:
              requests:
                memory: "256Mi"
                cpu: "250m"
              limits:
                memory: "512Mi"
                cpu: "500m"
          volumes:
          - name: compliance-results
            persistentVolumeClaim:
              claimName: compliance-results-pvc
          serviceAccountName: compliance-scanner-sa

---
# Vulnerability Scanner Job
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vulnerability-scanner
  namespace: monitoring
spec:
  schedule: "30 1 * * *"  # Daily at 1:30 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            test-type: vulnerability
        spec:
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            fsGroup: 65534
          containers:
          - name: vulnerability-scanner
            image: aquasec/trivy:latest
            command: ["/bin/sh"]
            args:
            - -c
            - |
              set -e
              echo "Starting vulnerability scan..."

              # Get all container images in the cluster
              kubectl get pods --all-namespaces -o jsonpath='{.items[*].spec.containers[*].image}' | tr ' ' '\n' | sort -u > /tmp/images.txt

              echo "=== Scanning Container Images ==="
              while read -r image; do
                echo "Scanning image: $image"
                trivy image --format json --output "/tmp/vuln-$(echo $image | tr '/:' '_').json" "$image" || true
              done < /tmp/images.txt

              echo "=== Scanning Kubernetes Configurations ==="
              trivy config --format json --output /tmp/k8s-config-scan.json /k8s-manifests/ || true

              echo "=== Generating Summary Report ==="
              find /tmp -name "vuln-*.json" -exec cat {} \; | jq -s '
                map(.Results // []) | flatten |
                group_by(.Severity) |
                map({severity: .[0].Severity, count: length}) |
                sort_by(.severity)
              ' > /tmp/vulnerability-summary.json

              echo "Vulnerability scan completed"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 65534
              capabilities:
                drop:
                - ALL
            volumeMounts:
            - name: vuln-results
              mountPath: /tmp
            - name: k8s-manifests
              mountPath: /k8s-manifests
              readOnly: true
            resources:
              requests:
                memory: "512Mi"
                cpu: "250m"
              limits:
                memory: "1Gi"
                cpu: "500m"
          volumes:
          - name: vuln-results
            persistentVolumeClaim:
              claimName: vulnerability-results-pvc
          - name: k8s-manifests
            configMap:
              name: k8s-manifests
          serviceAccountName: vulnerability-scanner-sa

---
# Penetration Testing Job
apiVersion: batch/v1
kind: Job
metadata:
  name: penetration-test
  namespace: monitoring
  labels:
    test-type: penetration
spec:
  template:
    metadata:
      labels:
        test-type: penetration
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: pentest
        image: kalilinux/kali-rolling:latest
        command: ["/bin/bash"]
        args:
        - -c
        - |
          set -e
          apt-get update && apt-get install -y nmap nikto curl jq

          GATEWAY_URL="zuul-gateway-lb.zuul-gateway"

          echo "=== Port Scanning ==="
          nmap -sS -O -T4 $GATEWAY_URL > /tmp/nmap-results.txt || true

          echo "=== Web Application Testing ==="
          nikto -h http://$GATEWAY_URL -Format json -output /tmp/nikto-results.json || true

          echo "=== API Fuzzing ==="
          for endpoint in /health /actuator/health /api/v1/users; do
            echo "Testing endpoint: $endpoint"
            curl -X GET "http://$GATEWAY_URL$endpoint" -w "%{http_code}\n" -o /dev/null -s || true
            curl -X POST "http://$GATEWAY_URL$endpoint" -w "%{http_code}\n" -o /dev/null -s || true
            curl -X PUT "http://$GATEWAY_URL$endpoint" -w "%{http_code}\n" -o /dev/null -s || true
            curl -X DELETE "http://$GATEWAY_URL$endpoint" -w "%{http_code}\n" -o /dev/null -s || true
          done > /tmp/api-fuzzing-results.txt

          echo "=== Testing HTTP Methods ==="
          for method in OPTIONS TRACE CONNECT; do
            curl -X $method "http://$GATEWAY_URL/" -w "%{http_code}\n" -o /dev/null -s
          done > /tmp/http-methods-results.txt

          echo "=== Testing Security Headers ==="
          curl -I "http://$GATEWAY_URL/" > /tmp/security-headers.txt

          echo "Penetration testing completed"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: pentest-results
          mountPath: /tmp
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: pentest-results
        emptyDir: {}

---
# Service Accounts for testing
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compliance-scanner-sa
  namespace: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vulnerability-scanner-sa
  namespace: monitoring

---
# RBAC for compliance scanner
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: compliance-scanner-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets", "namespaces"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["get", "list"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
  verbs: ["get", "list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: compliance-scanner-binding
subjects:
- kind: ServiceAccount
  name: compliance-scanner-sa
  namespace: monitoring
roleRef:
  kind: ClusterRole
  name: compliance-scanner-role
  apiGroup: rbac.authorization.k8s.io

---
# RBAC for vulnerability scanner
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vulnerability-scanner-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vulnerability-scanner-binding
subjects:
- kind: ServiceAccount
  name: vulnerability-scanner-sa
  namespace: monitoring
roleRef:
  kind: ClusterRole
  name: vulnerability-scanner-role
  apiGroup: rbac.authorization.k8s.io

---
# PVCs for storing test results
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: compliance-results-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3-encrypted
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vulnerability-results-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3-encrypted
  resources:
    requests:
      storage: 10Gi

---
# ConfigMap with Kubernetes manifests for scanning
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-manifests
  namespace: monitoring
data:
  demo-stack.yaml: |
    # Include the main demo stack for configuration scanning
    # This would contain the actual demo-stack.yaml content

---
# Security Test Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-test-dashboard
  namespace: monitoring
data:
  security-tests.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Security Test Results",
        "tags": ["security", "testing", "compliance"],
        "panels": [
          {
            "id": 1,
            "title": "Vulnerability Scan Results",
            "type": "table",
            "targets": [
              {
                "expr": "vulnerability_scan_results",
                "legendFormat": "{{severity}}"
              }
            ]
          },
          {
            "id": 2,
            "title": "Compliance Score",
            "type": "gauge",
            "targets": [
              {
                "expr": "compliance_score_percentage",
                "legendFormat": "Compliance %"
              }
            ]
          },
          {
            "id": 3,
            "title": "Security Test Pass Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "security_tests_passed / security_tests_total * 100",
                "legendFormat": "Pass Rate %"
              }
            ]
          }
        ]
      }
    }

---
# Test Results Exporter for metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-test-exporter
  namespace: monitoring
  labels:
    app: security-test-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: security-test-exporter
  template:
    metadata:
      labels:
        app: security-test-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: exporter
        image: prom/node-exporter:latest
        ports:
        - containerPort: 8080
          name: metrics
        command:
        - /bin/sh
        - -c
        - |
          # Simple metrics exporter for test results
          while true; do
            echo "# HELP security_tests_total Total number of security tests"
            echo "# TYPE security_tests_total counter"
            echo "security_tests_total $(ls /test-results/ | wc -l)"

            echo "# HELP vulnerability_scan_score Latest vulnerability scan score"
            echo "# TYPE vulnerability_scan_score gauge"
            echo "vulnerability_scan_score 0.95"

            echo "# HELP compliance_score_percentage Compliance score percentage"
            echo "# TYPE compliance_score_percentage gauge"
            echo "compliance_score_percentage 98.5"

            sleep 30
          done | nc -l -p 8080
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: test-results
          mountPath: /test-results
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: test-results
        persistentVolumeClaim:
          claimName: compliance-results-pvc

---
# Security Test Exporter Service
apiVersion: v1
kind: Service
metadata:
  name: security-test-exporter
  namespace: monitoring
  labels:
    app: security-test-exporter
spec:
  selector:
    app: security-test-exporter
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
  type: ClusterIP