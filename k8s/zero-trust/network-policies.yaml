apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: zuul-security
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: zuul-gateway-ingress
  namespace: zuul-security
spec:
  podSelector:
    matchLabels:
      app: zuul-gateway
  policyTypes:
  - Ingress
  ingress:
  # Allow traffic from Istio ingress gateway
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
      podSelector:
        matchLabels:
          app: istio-proxy
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8443

  # Allow health checks from kube-system
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080

  # Allow monitoring from prometheus
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
      podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8080

  # Allow Istio sidecar communication
  - from:
    - podSelector:
        matchLabels:
          security.istio.io/tlsMode: istio
    ports:
    - protocol: TCP
      port: 15090  # Envoy admin
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: zuul-gateway-egress
  namespace: zuul-security
spec:
  podSelector:
    matchLabels:
      app: zuul-gateway
  policyTypes:
  - Egress
  egress:
  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

  # HTTPS to external auth services
  - to: []
    ports:
    - protocol: TCP
      port: 443

  # Allow to backend services in same cluster
  - to:
    - namespaceSelector:
        matchLabels:
          security.istio.io/trusted: "true"
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8443

  # Istio control plane communication
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15010
    - protocol: TCP
      port: 15011
    - protocol: TCP
      port: 15012

  # Allow communication with monitoring
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: security-scanner-policy
  namespace: security-scanning
spec:
  podSelector:
    matchLabels:
      app: sbom-scanner
  policyTypes:
  - Ingress
  - Egress
  egress:
  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53

  # Container registry access
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 5000

  # Access to Kubernetes API
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 6443

  # Allow webhook notifications
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: admission-controller-policy
  namespace: security-policies
spec:
  podSelector:
    matchLabels:
      app: zuul-security-webhook
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow webhook calls from API server
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8443

  egress:
  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53

  # Access to vulnerability scanner
  - to:
    - namespaceSelector:
        matchLabels:
          name: security-scanning
      podSelector:
        matchLabels:
          app: grype-service
    ports:
    - protocol: TCP
      port: 8080

  # Access to container registry for image scanning
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 5000
---
apiVersion: v1
kind: Namespace
metadata:
  name: secure-zone
  labels:
    security.istio.io/trusted: "true"
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    network-policy: "strict"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secure-zone-isolation
  namespace: secure-zone
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Only allow from zuul-security namespace with proper labels
  - from:
    - namespaceSelector:
        matchLabels:
          name: zuul-security
      podSelector:
        matchLabels:
          security.clearance: "high"
    ports:
    - protocol: TCP
      port: 8080

  egress:
  # DNS only
  - to: []
    ports:
    - protocol: UDP
      port: 53

  # Only to other secure services
  - to:
    - namespaceSelector:
        matchLabels:
          security.istio.io/trusted: "true"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-access
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: prometheus
  policyTypes:
  - Egress
  egress:
  # Allow scraping from all namespaces with monitoring label
  - to:
    - namespaceSelector:
        matchLabels:
          monitoring: "enabled"
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 15090  # Istio metrics

  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
---
# Calico GlobalNetworkPolicy for additional security (if using Calico CNI)
apiVersion: projectcalico.org/v3
kind: GlobalNetworkPolicy
metadata:
  name: zuul-global-security
spec:
  order: 100
  selector: has(security.scan.required)
  types:
  - Ingress
  - Egress
  ingress:
  # Block all traffic from internet to pods with security requirements
  - action: Deny
    source:
      notNets:
      - 10.0.0.0/8
      - 172.16.0.0/12
      - 192.168.0.0/16

  # Allow from load balancer subnets only
  - action: Allow
    source:
      nets:
      - 10.0.0.0/24  # Your load balancer subnet
    destination:
      ports:
      - 8080
      - 8443

  egress:
  # Block egress to private networks from internet-facing pods
  - action: Deny
    destination:
      nets:
      - 169.254.169.254/32  # Block metadata service
      - 10.0.0.0/8
      - 172.16.0.0/12
      - 192.168.0.0/16
    source:
      selector: security.zone == "dmz"