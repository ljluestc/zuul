apiVersion: v1
kind: Namespace
metadata:
  name: zuul-security
  labels:
    # Pod Security Standards enforcement
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    # Additional security labels
    security.compliance.level: "high"
    security.scan.required: "true"
    istio-injection: enabled
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: zuul-gateway-pdb
  namespace: zuul-security
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: zuul-gateway
---
apiVersion: v1
kind: LimitRange
metadata:
  name: zuul-security-limits
  namespace: zuul-security
spec:
  limits:
  - default:
      memory: "1Gi"
      cpu: "1000m"
      ephemeral-storage: "2Gi"
    defaultRequest:
      memory: "256Mi"
      cpu: "100m"
      ephemeral-storage: "1Gi"
    max:
      memory: "4Gi"
      cpu: "4000m"
      ephemeral-storage: "10Gi"
    min:
      memory: "128Mi"
      cpu: "50m"
      ephemeral-storage: "500Mi"
    type: Container
  - default:
      memory: "2Gi"
      cpu: "2000m"
      ephemeral-storage: "4Gi"
    max:
      memory: "8Gi"
      cpu: "8000m"
      ephemeral-storage: "20Gi"
    min:
      memory: "256Mi"
      cpu: "100m"
      ephemeral-storage: "1Gi"
    type: Pod
  - max:
      storage: "50Gi"
    min:
      storage: "1Gi"
    type: PersistentVolumeClaim
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: zuul-security-quota
  namespace: zuul-security
spec:
  hard:
    requests.cpu: "10"
    requests.memory: "20Gi"
    requests.storage: "100Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"
    pods: "50"
    services: "10"
    secrets: "20"
    configmaps: "20"
    services.loadbalancers: "2"
    services.nodeports: "0"  # No NodePort services allowed
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-security-standards
  annotations:
    policies.kyverno.io/title: Enforce Security Standards
    policies.kyverno.io/category: Security
    policies.kyverno.io/description: >-
      Enforces comprehensive security standards for all workloads
spec:
  validationFailureAction: enforce
  background: true
  rules:
  # Enforce non-root containers
  - name: require-non-root
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
          - security-scanning
          - security-policies
    validate:
      message: "Containers must run as non-root user"
      pattern:
        spec:
          securityContext:
            runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
              runAsUser: ">0"

  # Enforce read-only root filesystem
  - name: require-read-only-root-filesystem
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Containers must have read-only root filesystem"
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true

  # Drop all capabilities
  - name: drop-all-capabilities
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Containers must drop all capabilities"
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL

  # Prevent privilege escalation
  - name: prevent-privilege-escalation
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Privilege escalation must be disabled"
      pattern:
        spec:
          containers:
          - securityContext:
              allowPrivilegeEscalation: false

  # Require security labels
  - name: require-security-labels
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Security labels are required"
      pattern:
        metadata:
          labels:
            security.scan.status: "?*"
            security.compliance.level: "?*"

  # Enforce resource limits
  - name: require-resource-limits
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Resource limits are required"
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: "?*"
                cpu: "?*"
              requests:
                memory: "?*"
                cpu: "?*"

  # Prevent host network access
  - name: prevent-host-network
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Host network access is not allowed"
      pattern:
        spec:
          =(hostNetwork): false

  # Prevent host PID/IPC
  - name: prevent-host-pid-ipc
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Host PID/IPC access is not allowed"
      pattern:
        spec:
          =(hostPID): false
          =(hostIPC): false

  # Require seccomp profile
  - name: require-seccomp
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Seccomp profile is required"
      pattern:
        spec:
          securityContext:
            seccompProfile:
              type: RuntimeDefault

  # Prevent privileged containers
  - name: prevent-privileged
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Privileged containers are not allowed"
      pattern:
        spec:
          containers:
          - securityContext:
              =(privileged): false

  # Enforce specific service account
  - name: require-service-account
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Specific service account is required"
      pattern:
        spec:
          serviceAccountName: "zuul-gateway | security-scanner"
          automountServiceAccountToken: false
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-image-security
spec:
  validationFailureAction: enforce
  background: true
  rules:
  # Require signed images
  - name: require-signed-images
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Images must be signed with cosign"
      pattern:
        metadata:
          annotations:
            security.image.signed: "true"

  # Block latest tag
  - name: disallow-latest-tag
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Latest tag is not allowed"
      pattern:
        spec:
          containers:
          - image: "!*:latest"

  # Require trusted registry
  - name: require-trusted-registry
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "Images must be from trusted registry"
      pattern:
        spec:
          containers:
          - image: "your-registry.com/* | gcr.io/* | quay.io/*"

  # Require SBOM annotation
  - name: require-sbom
    match:
      any:
      - resources:
          kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          namespaces:
          - zuul-security
    validate:
      message: "SBOM annotation is required"
      pattern:
        metadata:
          annotations:
            security.sbom.generated: "true"
            security.sbom.url: "?*"
---
apiVersion: config.gatekeeper.sh/v1alpha1
kind: Config
metadata:
  name: config
  namespace: gatekeeper-system
spec:
  match:
    - excludedNamespaces: ["kube-system", "gatekeeper-system"]
      processes: ["*"]
  validation:
    traces:
      - user:
          kind:
            group: "*"
            version: "*"
            kind: "*"
      - kind:
          group: "*"
          version: "*"
          kind: "*"
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: securitycompliancecheck
spec:
  crd:
    spec:
      names:
        kind: SecurityComplianceCheck
      validation:
        type: object
        properties:
          requiredLabels:
            type: array
            items:
              type: string
          allowedRegistries:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package securitycompliancecheck

        violation[{"msg": msg}] {
          input.review.kind.kind == "Pod"
          required := input.parameters.requiredLabels[_]
          not input.review.object.metadata.labels[required]
          msg := sprintf("Missing required security label: %v", [required])
        }

        violation[{"msg": msg}] {
          input.review.kind.kind == "Pod"
          image := input.review.object.spec.containers[_].image
          not registry_allowed(image, input.parameters.allowedRegistries)
          msg := sprintf("Image from untrusted registry: %v", [image])
        }

        registry_allowed(image, allowed_registries) {
          registry := allowed_registries[_]
          startswith(image, registry)
        }
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: SecurityComplianceCheck
metadata:
  name: zuul-security-compliance
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces: ["zuul-security", "security-scanning"]
  parameters:
    requiredLabels:
      - "security.scan.status"
      - "security.compliance.level"
      - "app"
      - "version"
    allowedRegistries:
      - "your-registry.com/"
      - "gcr.io/"
      - "quay.io/"
      - "docker.io/anchore/"
      - "docker.io/istio/"